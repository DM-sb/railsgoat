# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates Brakeman with GitHub's Code Scanning feature
# Brakeman is a static analysis security vulnerability scanner for Ruby on Rails applications

name: Brakeman Scan

on:
  workflow_dispatch: 
    inputs:
      scan-name:
        description: 'Name of the current scan'
        default: 'brakeman-scan'
        type: string
      desc: 
        description: 'What does this scan do'
        default: 'Brakeman SAST scan'
        type: string
      version:
        description: 'Current version of this product'
        default: '0.1.1'
        type: string
      product:
        description: 'DefectDojo product name'
        default: '1'
        type: integer
      endpoint: 
        description: 'DefectDojo endpoint'
        default: '/api/v2/engagements/'
        type: string
jobs:
  brakeman-scan:
    name: Brakeman Scan
    runs-on: ubuntu-latest
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Get current date as env
      id: date
      run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
  
    - name: Get date time as env
      id: datetime
      run: echo "datetime=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT
      
    - name: Echo date
      run: echo '${{ steps.date.outputs.date }}'
        
    # Customize the ruby version depending on your needs
    - name: Setup Ruby
      uses: ruby/setup-ruby@f20f1eae726df008313d2e0d78c5e602562a1bcf
      with:
        ruby-version: '2.7'

    - name: Setup Brakeman
      env:
        BRAKEMAN_VERSION: '4.10' # SARIF support is provided in Brakeman version 4.10+
      run: |
        gem install brakeman --version $BRAKEMAN_VERSION

    # Execute Brakeman CLI and generate a SARIF output with the security issues identified during the analysis
    - name: Scan
      continue-on-error: true
      run: |
        brakeman -f sarif -o output.sarif.json .
      
    # Create a defectdojo engagement with the the results of the Brakeman scan
    - name: Create new Engagement in DefectDojo
      id: engagements
      uses: ivanamat/defectdojo-engagements@v1
      with:
        token: ${{ secrets.defectdojo_token }}
        defectdojo_url: ${{ secrets.defectdojo_url }}
        defectdojo_endpoint: ${{ github.event.inputs.endpoint }}
        name: ${{ format('{0}-{1}', github.event.inputs.scan-name, steps.datetime.outputs.datetime ) }}
        description: ${{ github.event.inputs.desc }}
        version: ${{ github.event.inputs.version }}
        target_start: ${{ steps.date.outputs.date  }}
        target_end: ${{ steps.date.outputs.date  }}
        product: ${{ github.event.inputs.product }}
        
    - name: Show DefectDojo response
      run: |
        set -e
        printf '%s\n' '${{ steps.engagements.outputs.response }}'
      
    - name: Grab ID of the newly generated engagement. 
      id: grabid
      run: echo "engagement_id=$(jq '.id' <<< '${{ steps.engagements.outputs.response }}')" >> $GITHUB_OUTPUT
      
    - name: Print the engagement ID
      run: echo '${{ steps.grabid.outputs.engagement_id }}'
      
    - name: Publish report
      id: import-scan
      uses: ivanamat/defectdojo-import-scan@v1
      with:
        token: ${{ secrets.DEFECTOJO_TOKEN }}
        defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
        file: output.sarif.json
        scan_type: Brakeman Scan
        engagement: ${{ steps.grabid.outputs.engagement_id }}
        
    - name: Show response
      run: |
        set -e
        printf '%s\n' '${{ steps.import-scan.outputs.response }}'

    # Upload the SARIF file generated in the previous step
    - name: Upload SARIF
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: output.sarif.json
